# Тестовые сценарии + unittest + pytest (тесты ниже запускаются при помощи pytest: go to Terminal --> pytest <file directory name>)
# if __name__ == "__main__":  https://www.youtube.com/watch?v=vqsalStEu38. В общем есть принцип ООП называемый инкапсуляция(изоляция).
# Эта конструкция один из ее путей ее реализации, она позволяет изолировать (не импортировать)  методы, классы если они есть в модуле.
#
# 1. Если мы запускаем файл через терминал  как python name_file.py, в таком случае if __name__ == "__main__": и будет исполняться весь файл целиком (весь код).
#
# 2. Если мы запускаем файл (импортируем его) в другом файле(модуле). Представьте, что  мы в терминале запустили какой-то другой файл python name_other_file.py,
# у которого внутри прописано import name_file. То есть файл name_file.py  был запущен не как основной (не как main), а был запущен импортом .
# Таким образом, if __name__ == " имя самого файла(name_file)":
# В этом случае, то что написано под капотом внизу, подif __name__ == "__main__":  исполняться(передаваться в код) name_other_file.py не будет.

def test_abs_1():
    assert abs(-42) == 42, "Should be absolute value of a number"


def test_abs_2():
    assert abs(42) == 42, "Should be absolute value of a number"


if __name__ == "__main__":
    test_abs_1()
    test_abs_2()
    print("Everything passed")

# минусы такого подхода к запуску автотестов:
# Когда тестов становится много, сложно становится запускать только тесты из нужных тест-сьютов.
# Для каждого теста нужно создавать тестовые данные и окружение отдельно. Например, если мы захотим для каждого теста запускать браузер,
# а после завершения теста браузер закрывать, то логику работы с браузером придется дублировать в коде каждого теста.
# Если один из тестов завершится с ошибкой, например, тест упадёт с ошибкой AssertionError, то последующие тесты не запустятся.
# Мы не узнаем, были ли проблемы в этих тестах, пока не починим упавший тест или пока не запустим эти тесты по отдельности.
# Для решения этих проблем и упрощения написания и запуска тестов существуют специальные фреймворки, которые называются test runners (тест-раннеры)
# Например, unittest, PyTest и nose
